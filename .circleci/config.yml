# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  go: circleci/go@1.7.1
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    
    executor:
        name: go/default
        tag: "1.16"
    steps:
      - checkout
      - go/load-cache
      - go/mod-download
      - go/save-cache
      - run:
          name: Run tests
          command: go test -v
    build-docker-image:
      docker:
        #- image: microsoft/dotnet:latest
        - image: cimg/go:1.18.3
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
      steps:
      # Checkout the code as the first step.
        - checkout
        - docker/install-docker-tools
        - setup_remote_docker:
            docker_layer_caching: true
        - run:
            name: Build and push Docker image
            command: |
              docker build -t dotnetcoreapi.azurecr.io/dotnet-api:latest .
              docker login -u $DOCKER_USER -p $DOCKER_PASS dotnetcoreapi.azurecr.io
              docker push dotnetcoreapi.azurecr.io/dotnet-api:latest
        - setup_remote_docker:
          docker_layer_caching: true
      # Then simply use the dotnet container as you'd expect and run your tests
        - run:
          # Update this line with the directory that contains your tests project file
          #working_directory: ~/project/App.Tests
          #name: Run tests
          name: Build and push Docker image
          #dotnet test
          command: |
            docker build -t godemo.azurecr.io/go-demo:latest .
            docker login -u $DOCKER_USER -p $DOCKER_PASS godemo.azurecr.io
            docker push godemo.azurecr.io/go-demo:latest

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  #sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
  test-and-deploy:
    jobs:
      - build-and-test
      - build-docker-image:
          requires:
            - build-and-run-test
